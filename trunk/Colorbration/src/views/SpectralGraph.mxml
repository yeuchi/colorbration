<?xml version="1.0" encoding="utf-8"?>
<!--
Module:			SpectralGraph
Description:	Container of spectral data and Flex chart
				Flex chart mouse interaction utilizes Brendan Meutzner's Google Finance Program
Reference:		http://www.meutzner.com/blog/index.cfm/2007/8/14/Google-Finance-with-Flex-Code

Author(s):		C.T.Yeung			all code except Flex Chart mouse interaction	
				Brendan Meutzner	Flex chart mouse methods
				
Copyright (c) 2007 Brendan Meutzner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   width="100%" height="100%"
		   creationComplete="onCreationComplete()">
		   
	<mx:Metadata>
		[Event(name="spectralGraphChange", type="events.SpectralGraphEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import events.SpectralGraphEvent;
			import mx.charts;
			import com.Illuminants;
			import com.SpectralData;
			import mx.collections.ArrayCollection;
			import com.StandardObserver;
			
			[Bindable]public var srcColor:uint=0xCCBBAA;
			[Bindable]public var samColor:uint=0x888888;
			[Bindable]public var dataList:ArrayCollection;			// areaChart
			protected var _clrSample:SpectralData;					// sample curve
			protected var _illuminant:SpectralData;					// source curve
			protected var ptSrc:Point;								// onMouseDown()
			protected var ptNew:Point;								// onMouseMove(), onMouseUp()
			
			protected function onCreationComplete():void
			{
				var data:Array = new Array();
			}
			
			public function set selectedIlluminant(src:SpectralData):void
			{
				_illuminant = src;
				createGraphData();
			}
			
			public function set selectedSample(sam:SpectralData):void
			{
				_clrSample = sam;
				createGraphData();
			}
			
			protected function createGraphData():void
			{
				if ( !_clrSample || !_illuminant ) 
					return;
				
				dataList = new ArrayCollection();				
				for (var i:int=0; i<_illuminant.count(); i++)
				{
					var src:Point = _illuminant.getAnchorByIndex(i);
					var sam:Number = _clrSample.getY(src.x);
					dataList.addItem({wavelength:src.x.toString(), 
									  Source:src.y.toString(),
									  Sample:sam.toString()});	
				}
			}

/////////////////////////////////////////////////////////////////////
// Mouse events
			
			protected function onMouseDown(e:MouseEvent):void
			{
				ptSrc = new Point(e.localX, e.localY);
			}
			
			
			protected function onMouseMove(e:MouseEvent):void
			{
				if (!ptSrc)
					return;
				
				// Reference: 	Brendan Meutzner's Google Finance program
				var tmpArray:Array;
				tmpArray = this.chartSpectral.series[1].dataTransform.invertTransform(e.localX, e.localY);
				for(var i:int = 0; i < dataList.length; i++)
            	{
            		var dataItem:Object = dataList.getItemAt(i);
            		if (dataItem.wavelength == tmpArray[0]) {
            			dataItem.Sample = tmpArray[1];
            			this.chartSpectral.dataProvider = dataList;
            			
            			var wavelength:int = parseInt(tmpArray[0]);
            			var reflectance:Number = parseFloat(tmpArray[1]);
            			_clrSample.setAnchorByX(new Point(wavelength, reflectance));
            			return;
            		}
            	}
			}
			
			protected function onMouseUp(e:MouseEvent):void
			{
				var event:SpectralGraphEvent = new SpectralGraphEvent(SpectralGraphEvent.SPECTRALGRAPH_CHANGE);
				dispatchEvent(event);
				onMouseOut(e);
			}
			
			protected function onMouseOut(e:MouseEvent):void
			{
				ptSrc = null;
				ptNew = null;
			}
			
			protected function onMouseOverSample(e:MouseEvent):void
			{
				samSeries.alpha = .5;
			}
			
			protected function onMouseOutSample(e:MouseEvent):void
			{
				samSeries.alpha = 1;
			}
		]]>
	</mx:Script>
	
	<mx:SolidColor id="srcFill" color="{srcColor}" alpha=".5" />
	<mx:Stroke id="srcStroke" color="{srcColor}" weight="2" alpha="1" />
	<mx:SolidColor id="samFill" color="{samColor}" alpha=".5" />
    <mx:Stroke id="samStroke" color="{samColor}" weight="2" alpha="1" />
    
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:AreaChart id="chartSpectral" dataProvider="{dataList}" width="100%" height="100%" 
					  selectionMode="single" useHandCursor="true" buttonMode="true" 
			          mouseDown="onMouseDown(event)"
					  mouseMove="onMouseMove(event)"
					  mouseUp="onMouseUp(event)"
					  rollOut="onMouseOut(event)">
			<mx:horizontalAxis>
                <mx:CategoryAxis categoryField="wavelength"/>
            </mx:horizontalAxis>
            <mx:series>
                <mx:AreaSeries id="srcSeries" yField="Source" form="curve" displayName="Source" areaFill="{srcFill}" areaStroke="{srcStroke}"/>
                <mx:AreaSeries id="samSeries" yField="Sample" form="curve" displayName="Sample" areaFill="{samFill}" areaStroke="{samStroke}" selectable="true" 
                				mouseOver="onMouseOverSample(event)"
                				mouseOut="onMouseOutSample(event)"/>
            </mx:series>
		</mx:AreaChart>
		<mx:Legend dataProvider="{chartSpectral}" color="0x323232"/>
	</mx:HBox>
</mx:Canvas>
