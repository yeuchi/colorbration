<?xml version="1.0" encoding="utf-8"?>
<!--
Module:			StreakVideo.mxml

Description:	Main of the program
				- This is a website that converts user's panning video into a panoramic photo.
				- Because VideoDisplay class does not allow byteArray input, I have to upload 
				file from user's PC to server, then stream it into VideoDisplay.
				
				- Saving png is direct from application to user's file directory.

Author(s):		C.T. Yeung - concept and assembling this website.
				Adobe example sour - for php and Flex upload.

History:
10Feb11			1st functional															cty
20Feb11			add comments, upload progress dialog, refactored uploadReference		cty
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="955" minHeight="600"
			   creationComplete="onCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" enterState="onEnterDefault()"/>
		<s:State name="scan" enterState="onEnterScan()"/>
		<s:State name="count" enterState="onEnterCount()"/>			
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.images.JPGEncoder;
			import com.adobe.images.PNGEncoder;
			import com.ctyeung.ProgressDialog;
			import com.ctyeung.StreakCamera;
			import com.ctyeung.Targa.TGAEncoder;
			import com.ctyeung.WindowsBitmap.WinBmpEncoder;
			
			import flash.net.FileReference;
			
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.VideoEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.managers.PopUpManager;

			protected static const BUTTON_WID:int 		= 100;
			protected static const PADDING:int 			= 10;
			protected static const DEFAULT_WID:int 		= 640;
			protected static const DEFAULT_LEN:int 		= 480;
			protected static const MODE_DEFAULT:String 	= "default";
			protected static const MODE_COUNT:String 	= "count";
			protected static const MODE_SCAN:String  	= "scan";
			
			protected var numFrames:uint;
			protected var count:uint;
			protected var camera:StreakCamera;
			protected var fileRef:FileReference;
			protected var dlg:IFlexDisplayObject;
			protected var demoFinished:Boolean = false;
			
			protected function onCreationComplete():void {
				numFrames = 0;
				count = 0;
				this.addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true);
				video.addEventListener(VideoEvent.COMPLETE, onVideoComplete, false, 0, true);
				currentState = MODE_DEFAULT;
				camera = new StreakCamera();
			}
			
			protected function disposeFileReference():void {
				if(!fileRef)
					return;
				
				fileRef.cancel();
				
				if(fileRef.hasEventListener(Event.SELECT))
					fileRef.removeEventListener(Event.SELECT, onSelect);
				
				if(fileRef.hasEventListener(IOErrorEvent.IO_ERROR))
					fileRef.removeEventListener(IOErrorEvent.IO_ERROR, onError);
				
				if(fileRef.hasEventListener(Event.COMPLETE))
					fileRef.removeEventListener(Event.COMPLETE, onUploadComplete);
				fileRef = null;
			}
			
			protected function onCancel(e:Event):void {
				disposeFileReference();
				dlg.removeEventListener(Event.CANCEL, onCancel);
				dlg = null;
			}
			
			protected function dispose():void {
				clear();
				camera.dispose();
			}
			
			protected function clear():void {
				while(uic.numChildren) 
					uic.removeChildAt(0);
			}
			
// --- Buttons ------------------------------------------------------
			
			protected function onClickUpload():void {
				var imageTypes:FileFilter = new FileFilter("Video", "*.f4v;*.flv");
				disposeFileReference();
				fileRef = new FileReference();
				fileRef.addEventListener(Event.SELECT, onSelect, false, 0, true);
				fileRef.addEventListener(IOErrorEvent.IO_ERROR, onError, false, 0, true);
				fileRef.addEventListener(Event.COMPLETE, onUploadComplete);
				fileRef.browse([imageTypes]);
			}
			protected function onClickCount():void {
				numFrames = 0;
				count = 0;
				currentState = MODE_COUNT;
				video.stop();
				video.play();
			}
			
			protected function onClickScan():void {
				if(camera.bitmapData) {
					camera.streakWidth = this.streakWidth.value;
					camera.bitmapData.fillRect(camera.bitmapData.rect, 0xFFFFFF);
					count = 0;
					currentState = MODE_SCAN;
					video.stop();
					video.play();
				}
			}
			
			private function onClickSave():void
			{
				var bytes:ByteArray = saveFile();
				fileRef.save(bytes, "panorama.png");
			}
			
			private function onClickHelp():void {
				navigateToURL(new URLRequest("http://www.ctyeung.com/flex/VideoPanorama/index.html"),"_blank");
			}

// --- serialize/deserialize operations --------------------------------------------
			
			protected function saveFile():ByteArray
			{
				if (!camera.bitmapData) {
					Alert.show("Failed encoding");
					return null;
				}
				return PNGEncoder.encode(camera.bitmapData);
			}
			
			protected function onError(e:Event):void {
				Alert.show("load Error"+e.toString());
			}
			
			private function onSelect(event:Event):void {
				dispose();
				this.count = 0;
				this.numFrames = 0;
				this.currentState = MODE_DEFAULT;
				fileRef.upload(new URLRequest("http://www.ctyeung.com/flex/upload/upload.php"),"Filedata", true);
				dlg = PopUpManager.createPopUp(this, ProgressDialog, true);
				dlg.addEventListener(Event.CANCEL, onCancel, false, 0, true);
			}
			
			protected function onUploadComplete(event:Event):void {
				disposeFileReference();
				
				PopUpManager.removePopUp(dlg);
				btnSave.enabled = false;
				
				fileRef = event.currentTarget as FileReference;
				video.source = "http://www.ctyeung.com/flex/upload/"+fileRef.name;
				
				var w:int = video.videoObject.videoWidth;
				var h:int = video.videoObject.videoHeight;
				this.width = (w>DEFAULT_WID)?w:DEFAULT_WID + 100;
				this.height = (h>DEFAULT_LEN)?h: DEFAULT_LEN + 200;
				video.play();
			}

// --- video operations ---------------------------------------------
			
			protected function onEnterFrame(e:Event):void {
				if(!video.playing)
					return;
				
				switch(currentState) {
					case MODE_SCAN:
						if(count<numFrames) {
							camera.scan(video, count);
						}
						else{
							video.stop();
						}
						++ count;
						break;
					
					case MODE_COUNT:
						++ numFrames;
						txtCount.text = "Frames:" + numFrames.toString();
						break;
				}
			}
			
			protected function onVideoComplete(e:Event):void {
				switch(currentState) {
					case MODE_DEFAULT:
						if(demoFinished) {
							this.currentState = MODE_COUNT;
							video.autoPlay = false;
						}
						demoFinished = true;
						break;
					
					case MODE_SCAN:
						btnSave.enabled = true;
						break;
					
					case MODE_COUNT:
						currentState = MODE_SCAN;
						clear();
						camera.init(	video.videoObject.videoWidth, 
							video.videoObject.videoHeight,
							numFrames,
							streakWidth.value,
							StreakCamera.SCAN_HORIZONTAL);
						uic.addChild(new Bitmap(camera.bitmapData));
						uic.width = camera.scanLength/2;
						uic.height = video.videoObject.videoHeight/2;
						break;
				}
			}
			
			protected function onChangeStreakWidth():void {
				if(camera) {
					clear();
					camera.resize(	video.videoObject.videoWidth, 
						video.videoObject.videoHeight,
						streakWidth.value);
					
					uic.addChild(new Bitmap(camera.bitmapData));
					uic.width = camera.scanLength/2;
					uic.height = video.videoObject.videoHeight/2;
				}
			}

// --- states -------------------------------------------------------
			
			protected function onEnterScan():void {
				btnScan.enabled = true;
				btnCount.enabled = false;
				streakWidth.enabled = true;
			}
			
			protected function onEnterCount():void {
				btnScan.enabled = false;
				btnCount.enabled = true;
				streakWidth.enabled = false;
			}
			
			protected function onEnterDefault():void {
				btnScan.enabled = false;
				btnCount.enabled = false;
				streakWidth.enabled = false;
			}
		]]>
	</fx:Script>
	<s:VGroup horizontalAlign="left">
	<mx:HBox paddingBottom="{PADDING}" 
			 paddingLeft="{PADDING}" 
			 paddingRight="{PADDING}" 
			 paddingTop="{PADDING}" >
		<mx:Box id="playerBox" borderColor="0" borderStyle="solid">
			<s:VideoDisplay id="video" autoPlay="true" source="http://www.ctyeung.com/flex/upload/BlockBuster2.f4v" />
		</mx:Box>
		<mx:VBox>
			<s:Label id="txtLoaded" text="Video2Panorama"/>
			<mx:VBox borderColor="0x888888" 
					borderStyle="solid" 
					cornerRadius="5" 
					paddingBottom="{PADDING}" 
					paddingLeft="{PADDING}" 
					paddingRight="{PADDING}" 
					paddingTop="{PADDING}" >
				<mx:HBox verticalAlign="middle">
					<mx:Button id="btnLoad" width="{BUTTON_WID}" label="Upload" click="onClickUpload()"/>
					<mx:Spacer width="10"/>
					<s:Label text="Flash: f4v flv" width="{BUTTON_WID}"/>
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
					<mx:Button id="btnSave" width="{BUTTON_WID}" label="Save" click="onClickSave()" enabled="false"/>
					<mx:Spacer width="10"/>
					<s:Label text="Image: *.png" width="{BUTTON_WID}"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="5"/>
			<mx:HBox borderColor="0x888888" 
					 borderStyle="solid" 
					 cornerRadius="5" 
					 paddingBottom="{PADDING}" 
					 paddingLeft="{PADDING}" 
					 paddingRight="{PADDING}" 
					 paddingTop="{PADDING}" >
				<s:Button id="btnCount" width="{BUTTON_WID}" label="Count" click="onClickCount()"/>
				<mx:Spacer width="10"/>
				<s:Label id="txtCount" text="num frames=??" width="{BUTTON_WID}" />
			</mx:HBox>
			<mx:Spacer height="5"/>
			<mx:Box borderColor="0x888888" 
					borderStyle="solid" 
					cornerRadius="5" 
					paddingBottom="{PADDING}" 
					paddingLeft="{PADDING}" 
					paddingRight="{PADDING}" 
					paddingTop="{PADDING}" >
				
				<mx:HBox verticalAlign="middle">
					<s:NumericStepper id="streakWidth" width="{BUTTON_WID}" stepSize="1" value="6" minimum="2" maximum="30" change="onChangeStreakWidth()"/>
					<mx:Spacer width="10"/>
					<s:Label text="Slit width" width="{BUTTON_WID}"/>
				</mx:HBox>
				<s:Button id="btnScan" width="{BUTTON_WID}" label="Render" click="onClickScan()"/>
			</mx:Box>
			<mx:Spacer height="5"/>
			<mx:Box borderColor="0x888888" 
					borderStyle="solid" 
					cornerRadius="5" 
					paddingBottom="{PADDING}" 
					paddingLeft="{PADDING}" 
					paddingRight="{PADDING}" 
					paddingTop="{PADDING}" >
				<mx:HBox verticalAlign="middle">
					<s:Button id="btnHelp" width="{BUTTON_WID}" label="Help" click="onClickHelp()" />
					<mx:Spacer width="10"/>
					<s:Label text="sample, direction" width="{BUTTON_WID}"/>
				</mx:HBox>
			</mx:Box>
		</mx:VBox>
	</mx:HBox>	
		<mx:Box borderColor="0" borderStyle="solid">
			<mx:UIComponent id="uic"/>
		</mx:Box>
		
	</s:VGroup>
</s:Application>
