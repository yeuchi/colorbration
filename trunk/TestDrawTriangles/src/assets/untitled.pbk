// ===========================================================
// Module:      Triangle Graident
//
// Description: downloaded Illuminati's pixel bender filter for
//              performing a gradient fill where the 3 points
//              are specified colors and positions.
//
//              unfortunately, it does not work out of the box
//              and the logic seems a bit off.  This will only work
//              for isoscele triangle.  The ratio of color 
//              mixture should be base on distance from point to "line",
//              not point to point.
//
//              will comment out his code and append my own.
//              
//
// Author(s):   Illuminati (Illuminate1989@gmail.com)
//              C.T. Yeung
// ===========================================================
<languageVersion : 1.0;>

kernel NewFilter
<   namespace : "3D pixel shaders";
    vendor : "Illuminati";
    version : 1;
    description : "Shader for multicolor vertex triangle object for flash; use as shader fill";
>
{
    output pixel4 dst;
    
    parameter float caRed <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float caGrn <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float caBlu <
       minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float cbRed <
       minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float cbGrn <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float cbBlu <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float ccRed <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float ccGrn <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float ccBlu <
        minValue:0.0;
        maxValue:1.0;
        defaultValue:0.0;
    >;
    parameter float2 pta <
        minValue:float2(-65535,-65535);
        maxValue:float2(65535, 65535);
        defaultValue:float2(0,0);
    >;
    parameter float2 ptb <
        minValue:float2(-65535,-65535);
        maxValue:float2(65535, 65535);
        defaultValue:float2(0,0);
    >;
    parameter float2 ptc <
        minValue:float2(-65535,-65535);
        maxValue:float2(65535, 65535);
        defaultValue:float2(0,0);
    >;
    void
    evaluatePixel()
    {
        float2 oc = outCoord();
        float sa = distance(ptb, ptc);
        float sb = distance(pta, ptc);
        float sc = distance(pta, ptb);
        float da = distance(oc, pta);
        float db = distance(oc, ptb);
        float dc = distance(oc, ptc);
        /*
        float pp = (sa+sb+sc)/float(2);
        float ppa = (dc+db+sa)/float(2);
        float ppb = (dc+da+sb)/float(2);
        float ppc = (da+db+sc)/float(2);
        float sABC = sqrt(pp*(pp-sa)*(pp-sb)*(pp-sc));
        float sOBC = sqrt(ppa*(ppa-sa)*(ppa-db)*(ppa-dc));
        float sOAC = sqrt(ppb*(ppb-sb)*(ppb-da)*(ppb-dc));
        float sOAB = sqrt(ppc*(ppc-sc)*(ppc-da)*(ppc-db));
        float aA = sOBC/sABC;
        float aB = sOAC/sABC;
        float aC = sOAB/sABC;
        dst.r = (aA*ca.r)+(aB*cb.r)+(aC*cc.r);
        dst.g = (aA*ca.g)+(aB*cb.g)+(aC*cc.g);
        dst.b = (aA*ca.b)+(aB*cb.b)+(aC*cc.b);
        float tmpAlpha = (aA*ca.a)+(aB*cb.a)+(aC*cc.a);
        float oda = (float(2)*sOBC)/sa;
        float odb = (float(2)*sOAC)/sb;
        float odc = (float(2)*sOAB)/sc;
        if((oda>float(1))&&(odb>float(1))&&(odc>float(1))) {
            dst.a = tmpAlpha;
        } else {
            float minSide = float(0);
            if(oda<odb) {
                if(oda<odc) {
                    minSide = oda;
                } else {
                    if(odc<odb) {
                        minSide = odc;
                    } else {
                        minSide = odb;
                    }
                }
            } else {
                if(odb<odc) {
                    minSide = odb;
                } else {
                    if(oda<odc) {
                        minSide = oda;
                    } else {
                        minSide = odc;
                    }
                }
            }
            dst.a = tmpAlpha*minSide;
            */
            
            dst.a = 0.0;
            dst.r = 1.0;
            dst.g = 1.0;
            dst.b = 1.0;
            
            if(da > 50.0|| da < -50.0) {
                dst.a = .6;
                dst.r = 1.0;
                dst.g = 0.0;
                dst.b = 0.3;
            }

   //     }
    }
}
