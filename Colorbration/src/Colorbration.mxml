<?xml version="1.0" encoding="utf-8"?>
<!-- 
//	Module:			Colorbration.mxml
//	Description: 	color conversion demo
//
// 	Author(s):		C.T.Yeung		(cty)
//
//  06Mar09			making it public							cty
//  06Mar09			Reflectance -> XYZ -> CIEL*a*b* ->sRGB		cty
//
// Copyright (c) 2009 C.T.Yeung

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="absolute"
			    xmlns:com="com.*"
			    xmlns:views="views.*"
			    horizontalAlign="center" verticalAlign="middle"
			    creationComplete="onCreationComplete()"
			    viewSourceURL="srcview/index.html">
	<mx:Script>
		<![CDATA[
			import events.SpectralGraphEvent;
			import com.Illuminants;
			import com.ColorSamples;
			import mx.events.FlexEvent;
			import com.SpectralData;
			import com.IlluminantD50;
			import com.Spectral2XYZ;
			import com.IlluminantD65;
			import events.EffectEndEvent;
			
			[Bindable]public var clrSamples:ColorSamples;					// all avaiable color samples					
			[Bindable]public var illuminants:Illuminants;					// all available illuminants

			protected var samIndex:int;
			protected var srcIndex:int;
			
			public function onCreationComplete():void
			{
				initCurves();
				samIndex = 0;
				srcIndex = 0;
			}
			
			protected function initCurves():void
			{
				// tristimulus
				illuminants = new Illuminants();
				viewTristimulus.selectedIlluminant = illuminants.objList[srcIndex];
					
				clrSamples = new ColorSamples();
				
				// spectral data
				viewSpectral.selectedIlluminant = illuminants.objList[srcIndex];
				updateData(samIndex, srcIndex);
			}
			
			protected function updateData(samIndex:int, srcIndex:int):void
			{
				viewTristimulus.selectedIlluminant = illuminants.objList[srcIndex];
				viewTristimulus.selectedSample = clrSamples.objList[samIndex];
				viewSpectral.selectedIlluminant = illuminants.objList[srcIndex];
				viewSpectral.selectedSample = clrSamples.objList[samIndex];
				viewCIExyY.XYZ = viewTristimulus.spect2XYZ;
				viewCIELab.XYZ = viewTristimulus.spect2XYZ;
				viewsRGB.XYZ = viewTristimulus.spect2XYZ;
				// update color of sample, sRGB
				var clr:uint = uint(viewsRGB.oXYZ2sRGB.R) << (8*2); 
				clr += uint(viewsRGB.oXYZ2sRGB.G) << 8;
				clr += uint(viewsRGB.oXYZ2sRGB.B);
				viewSpectral.samFill.color = clr;
				viewSpectral.samStroke.color = clr;
			}
			
/////////////////////////////////////////////////////////////////////
// Control Panel Events

			protected function onControlPanelCreate(e:Event):void
			{
				samIndex = clrSamples.nameList.length;
				clrSamples.onCreate(e.cmbSelectedLabel);
				viewControls.cmbSample.selectedIndex = samIndex;
				updateData(samIndex, srcIndex);
			}
			
			protected function onControlPanelDelete(e:Event):void
			{
				clrSamples.objList.splice(e.cmbSelectedIndex, 1);
				clrSamples.nameList.splice(e.cmbSelectedIndex, 1);
				
				if ( clrSamples.objList.length == 0 ) {
					clrSamples.onCreate();
				}
				samIndex = clrSamples.nameList.length-1;
				viewControls.cmbSample.selectedIndex = samIndex;
				updateData(samIndex, srcIndex);
			}
			
			protected function onControlPanelSampleChange(e:Event):void
			{
				samIndex = e.cmbSelectedIndex;
				updateData(samIndex, srcIndex);
			}
			
			protected function onControlPanelSourceChange(e:Event):void
			{
				srcIndex = e.cmbSelectedIndex;
				updateData(samIndex, srcIndex);
			}
			
			protected function onControlPanelObserverChange(e:Event):void
			{
				this.viewStdObserver.functionType = e.cmbSelectedLabel;
				updateData(samIndex, srcIndex);
			}

/////////////////////////////////////////////////////////////////////
// SpectralGraph events

			protected function onChangeSpectralGraph(e:SpectralGraphEvent):void
			{
				// recalculate 
				updateData(samIndex, srcIndex);
			}
		]]>
	</mx:Script>	
	
	<mx:HBox horizontalAlign="center" verticalAlign="middle"  
			 width="90%" height="90%" paddingLeft="10" paddingRight="10" paddingTop="10">
		<mx:TabNavigator id="tabNav" width="{this.width-viewControls.width-50}" height="100%" creationPolicy="all">
			<mx:VBox label="Standard Observer">
				<views:StandardObserverGraph id="viewStdObserver" />
			</mx:VBox>
			<mx:VBox label="Spectral Reflectance">
				<views:SpectralGraph id="viewSpectral" spectralGraphChange="onChangeSpectralGraph(event)" />
			</mx:VBox>
			<mx:VBox label="Tristimulus XYZ">
				<views:Tristimulus id="viewTristimulus"/>
			</mx:VBox>
			<mx:VBox label="Chromaticity xyY">
				<views:Chromaticity id="viewCIExyY"/>
			</mx:VBox>
			<mx:VBox label="CIE L*a*b*">
				<views:CIELab id="viewCIELab"/>
			</mx:VBox>
			<mx:VBox label="HP sRGB">
				<views:sRGB id="viewsRGB"/>
			</mx:VBox>
		</mx:TabNavigator>
		<mx:VBox borderColor="0x00" borderStyle="solid" borderThickness="1" width="100%" height="100%"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" cornerRadius="10">
			<views:ControlPanel id="viewControls" horizontalScrollPolicy="off" 
								sourceList="{illuminants.nameList}"
							    sampleList="{clrSamples.nameList}"
								controlPanelCreate="onControlPanelCreate(event)"
							    controlPanelDelete="onControlPanelDelete(event)"
							    controlPanelSampleChange="onControlPanelSampleChange(event)"
							    controlPanelSourceChange="onControlPanelSourceChange(event)"
							    controlPanelObserverChange="onControlPanelObserverChange(event)"/>
		</mx:VBox>
	</mx:HBox>
</mx:Application>
