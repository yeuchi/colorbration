<?xml version="1.0" encoding="utf-8"?>
<!-- 
//	Module:			StandardObserverGraph.mxml
//	Description: 	here is the graph displayed
//
// 	Author(s):		C.T.Yeung		(cty)
//
// Copyright (c) 2009 C.T.Yeung

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--><mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   width="100%" height="100%"
		   creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import com.SpectralData;
			import mx.collections.ArrayCollection;
			import com.StandardObserver;
			
			[Bindable] public var dataList:ArrayCollection;
			public var stdObserver:StandardObserver;
			public var spectral:SpectralData;
			
			protected function onCreationComplete():void
			{
				stdObserver = new StandardObserver();
				
				// default with a DC value of 50% reflectance
				var data:Array = new Array();
				spectral = new SpectralData();
				functionType = StandardObserver.FUNC_2D_1931;
			}
			
			public function set functionType(type:String):void
			{
				stdObserver.functionType = type;
				dataList = createGraphData();
			}
			
			protected function createGraphData():ArrayCollection
			{
				var arrayCollection:ArrayCollection = new ArrayCollection();
				
				for (var i:int=0; i<stdObserver.count; i++)
				{
					var anchorX:Point = stdObserver.stdObserverX.getAnchorByIndex(i);
					var anchorY:Point = stdObserver.stdObserverY.getAnchorByIndex(i);
					var anchorZ:Point = stdObserver.stdObserverZ.getAnchorByIndex(i);
					arrayCollection.addItem({wavelength:anchorX.x.toString(), 
											 X:anchorX.y.toString(),
											 Y:anchorY.y.toString(),
											 Z:anchorZ.y.toString()});	
				}
				return arrayCollection;
			}
		]]>
	</mx:Script>
	<mx:SolidColor id="sc1" color="0xFF" alpha=".5"/>
	<mx:SolidColor id="sc2" color="0xFF00" alpha=".5"/>
	<mx:SolidColor id="sc3" color="0xFF0000" alpha=".5"/>
	
	<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:AreaChart id="chartSpectral" dataProvider="{dataList}" width="100%" height="100%">
			<mx:horizontalAxis>
                <mx:CategoryAxis categoryField="wavelength"/>
            </mx:horizontalAxis>
            <mx:series>
                <mx:AreaSeries id="stdXSeries" yField="X" form="curve" displayName="Standard Observer X" areaFill="{sc3}" />
                <mx:AreaSeries id="stdYSeries" yField="Y" form="curve" displayName="Standard Observer Y" areaFill="{sc2}" />
                <mx:AreaSeries id="stdZSeries" yField="Z" form="curve" displayName="Standard Observer Z" areaFill="{sc1}" />
            </mx:series>
		</mx:AreaChart>
		<mx:Legend dataProvider="{chartSpectral}" color="0x323232"/>
	</mx:HBox>
</mx:Canvas>
